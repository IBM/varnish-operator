apiVersion: caching.ibm.com/v1alpha1
kind: VarnishCluster
metadata:
  name: varnishcluster-sample
spec:
  # The number of varnish instances to run. Default: 1
  replicas: 1
  # updateStrategy can be used to control the way Varnish pods will be updated. "OnDelete" is by default.
#  updateStrategy:
#    type: "OnDelete" #can be "OnDelete", "RollingUpdate" and "DelayedRollingUpdate"
  varnish:
    # path to image + tag
#    image: cinple/varnish:0.27.2
#    imagePullPolicy: Always
    # Resources allocated to the Varnish pod through Kubernetes. It is strongly recommended that you specify resources,
    # since Varnish is an in-memory cache, and you do not want it restarting frequently.
    #resources:
    #  limits:
    #    cpu: 1
    #    memory: 2040Mi
    #  requests:
    #    cpu: 1
    #    memory: 2040Mi
    # Additional args that will be passed to the varnishd command line. For more information, run `varnishd "-?"`
    # some args are used for setting up Varnish to work with operator and are not allowed to be specified by the user
    args: ["-p", "default_ttl=3600", "-p", "default_grace=3600"]
    # varnish's controller - an optional definiton for the pod. It allows override default image name and pull policy
    # and defines the container's resources allocation.
#    controller:
      #  # path to image + tag to override, by default it refers to varnish.image with "-controller" suffix image.
#      image: cinple/varnish-controller:0.27.2
      #  # imagePullPolicy controls how the varnish-controller image will be pulled for new containers
      #  imagePullPolicy: Always
      #  # Resources allocated to the Varnish controller container through Kubernetes.
      #  #resources:
      #  #  limits:
      #  #    cpu: 1
      #  #    memory: 2040Mi
      #  #  requests:
      #  #    cpu: 1
      #  #    memory: 2040Mi
    # varnish's metrics exporter - an optional definiton for the pod. It allows override default image name and pull policy
    # and defines the container's resources allocation.

#    metricsExporter:
      #  # path to image + tag to override, by default it refers to varnish.image with "-metrics-exporter" suffix image.
#      image: cinple/varnish-metrics-exporter:0.27.2
      #  # imagePullPolicy controls how the varnish-metrics-exporter image will be pulled for new containers
      #  imagePullPolicy: Always
      #  # Resources allocated to the Varnish metrics exporter container through Kubernetes.
      #  #resources:
      #  #  limits:
      #  #    cpu: 1
      #  #    memory: 2040Mi
      #  #  requests:
      #  #    cpu: 1
      #  #    memory: 2040Mi
    # use to inject additional parameters into your Varnish container
    #envFrom:
    #  secretRef:
    #    name: vcl-secrets
  vcl:
    # the name given to the configMap that contains the contents of the vcl.
    # If the configMap does not exist, a basic round-robin-based VCL file will be created and used.
    # MUST use only lowercase letters, numbers, "-", or "."
    configMapName: vcl-files
    # the name of the base VCL file
    entrypointFileName: entrypoint.vcl
  backend:
    # pod selector to identify the pods being cached
    selector:
      app: nginx
    port: web #can be port name or port number
    # zoneBalancing: 
    #   # thresholds | auto | disabled
    #   type: auto
    #   thresholds: 
    #   - threshold: 50
    #     local: 25
    #     remote: 75
    #   - threshold: 90
    #     local: 90
    #     remote: 10
  service:
    port: 80
#    metricsPort: 8080
#    type: ClusterIP # ClusterIP, LoadBalancer and NodePort are supported
#    annotations:
#      example: annotation
  # Affinity configuration to apply to Varnish pods.
  # For more on affinity, see https://kubernetes.io/docs/concepts/configuration/assign-pod-node#affinity-and-anti-affinity
  #affinity:
  #  podAntiAffinity:
  #    requiredDuringSchedulingIgnoredDuringExecution:
  #    - labelSelector:
  #        Apply the anti-affinity to all pods that match the following expression.
  #        In this case, it finds pods with label "middleware: varnish".
  #        All labels applied to the VarnishCluster are also applied to its dependent resources, including the Varnish pods.
  #        matchExpressions:
  #        - key: middleware
  #          operator: In
  #          values:
  #          - varnish
  #      This groups nodes according to the label key given.
  #      Technically any arbitrary label can be used for grouping, but there is a set of predefined labels on nodes that are almost always used.
  #      Read https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#an-example-of-a-pod-that-uses-pod-affinity for a good explanation of topologyKey.
  #      topologyKey: "kubernetes.io/hostname"

  # Tolerations to apply to Varnish pods. For more on tolerations, see https://kubernetes.io/docs/concepts/configuration/taint-and-toleration
  # Also, see the README.md#tolerations for suggested configurations
  #tolerations:
  #- key: "key1"
  #  operator: "Equal"
  #  value: "value1"
  #  effect: "NoSchedule"
  #- key: "key1"
  #  operator: "Equal"
  #  value: "value1"
  #  effect: "NoExecute"

  # PodDisruptionBudgets allow you to tell Kubernetes how tolerant you are about pods going down due to administrative events, such node autoscaling or node upgrades.
  # For example, with "maxUnavailable: 0", any node drain events (possible during node autoscaling and upgrading) are not possible, because the budget does not allow for any pods to become unavailable.
  # For more information, see https://kubernetes.io/docs/concepts/workloads/pods/disruptions/ for information on what is considered a "disruption"
  # and https://kubernetes.io/docs/tasks/run-application/configure-pdb/ for more about PodDisruptionBudgets specifically.
  # NOTE: there should be ONLY ONE field under this spec - "maxUnavailable" and "minAvailable" are mutually exclusive
  #podDisruptionBudget:
  #  maxUnavailable: 0
  #  minAvailable: 2
  #monitoring:
  #  prometheusServiceMonitor:
  #    enabled: false
  #    namespace: ""
  #    labels:
  #      foo: bar
  #    scrapeInterval: 30s
  #  grafanaDashboard:
  #    enabled: false
  #    namespace: ""
  #    labels:
  #      foo: bar
  #    datasourceName: ""

  # logging level: "debug", "info", "warn", "error"
  #logLevel: info
  # logging encoder: "json", "console"
#  logFormat: console
